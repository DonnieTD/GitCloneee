{"version":3,"sources":["LoggedIn/Feed/Feed.tsx","LoggedIn/Navbar/styles.js","LoggedIn/Navbar/Navbar.tsx","LoggedIn/LoggedIn.tsx","LogInButton/LogInButton.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Feed","Wrapper","styled","div","Navbar","LoggedIn","LogInButton","button","App","useState","loggedIn","useEffect","urlParams","URLSearchParams","window","location","search","has","ajax","url","method","headers","body","client_id","client_secret","code","get","pipe","map","response","console","log","catchError","error","of","subscribe","className","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+OAEaA,G,MAAO,WAClB,OAAO,gC,gICAF,IAAMC,EAAUC,IAAOC,IAAV,KCAPC,EAAS,WACpB,OAAO,kBAACH,EAAD,OCAII,EAAW,WACtB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,mTCLC,IAAMC,EAAcJ,IAAOK,OAAV,K,gCCuDTC,MAlDf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KAoCb,OApCa,KAIbC,qBAAU,WACR,IAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtD,GAAIJ,EAAUK,IAAI,QACFC,YAAK,CACjBC,IAAI,8CACJC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAM,CACJC,UAAW,uBACXC,cAAe,2CACfC,KAAMb,EAAUc,IAAI,WAGrBC,KACCC,aAAI,SAACC,GAAD,OAAcC,QAAQC,IAAI,aAAcF,MAC5CG,aAAW,SAACC,GAEV,OADAH,QAAQC,IAAI,UAAWE,GAChBC,YAAGD,OAGbE,cAEJ,IASD,yBAAKC,UAAU,OACZ1B,EACC,kBAAC,EAAD,MAEA,uBAAG2B,KAAK,sFACN,kBAAC/B,EAAD,eALN,MCjCgBgC,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLH,QAAQG,MAAMA,EAAMoB,c","file":"static/js/main.dcf1cc21.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Feed = () => {\r\n  return <div></div>;\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background: #443850;\r\n  height: 10vh;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./styles\";\r\n\r\nexport const Navbar = () => {\r\n  return <Wrapper></Wrapper>;\r\n};\r\n","import React from \"react\";\r\nimport { Feed } from \"./Feed/Feed\";\r\nimport { Navbar } from \"./Navbar/Navbar\";\r\n\r\nexport const LoggedIn = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Feed />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const LogInButton = styled.button`\r\n  padding: 2vh 5vw;\r\n  font-size: 2em;\r\n  border: 2px solid #443850;\r\n  background: rgba(68, 56, 80, 0.3);\r\n  border-radius: 40px;\r\n  color: #443850;\r\n  position: relative;\r\n  top: 43vh;\r\n  &:hover {\r\n    background: transparent;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { LoggedIn } from \"./LoggedIn/LoggedIn\";\nimport { LogInButton } from \"./LogInButton/LogInButton\";\nimport { ajax } from \"rxjs/ajax\";\nimport { map, catchError } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  // url params effect\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has(\"code\")) {\n      const users = ajax({\n        url: `https://github.com/login/oauth/access_token`,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: {\n          client_id: \"e23ead57921950483416\",\n          client_secret: \"6f330f175f6161f325ab9ccd4e6a62f8b2eee4df\",\n          code: urlParams.get(\"code\"),\n        },\n      })\n        .pipe(\n          map((response) => console.log(\"response: \", response)),\n          catchError((error) => {\n            console.log(\"error: \", error);\n            return of(error);\n          })\n        )\n        .subscribe();\n    }\n  }, []);\n\n  // render\n  // check if logged in if logged in show screen\n  // if nah check if there are url params\n  // if yea do the oath stuffs\n  // if nah show login button\n\n  return (\n    <div className=\"App\">\n      {loggedIn ? (\n        <LoggedIn />\n      ) : (\n        <a href=\"https://github.com/login/oauth/authorize?client_id=e23ead57921950483416&scope=repo\">\n          <LogInButton>Start</LogInButton>\n        </a>\n      )}\n      ;\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}